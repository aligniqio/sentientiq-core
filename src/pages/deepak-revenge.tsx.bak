import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  PhoneOff, 
  AlertTriangle, 
  RefreshCw,
  Bug,
  HelpCircle,
  Cpu,
  Code,
  TrendingDown,
  MessageSquare,
  XCircle
} from 'lucide-react';

interface SupportTicket {
  id: string;
  title: string;
  priority: 'critical' | 'high' | 'low';
  status: 'open' | 'pending' | 'wontfix';
  description: string;
  vendorResponse?: string;
}

const DeepakRevenge: React.FC = () => {
  const [currentCall, setCurrentCall] = useState(0);
  const [mathRandomValue, setMathRandomValue] = useState(0.4823);
  const [refreshCount, setRefreshCount] = useState(0);
  const [showTickets, setShowTickets] = useState(false);
  const [debugMode, setDebugMode] = useState(false);

  // The support tickets that will destroy them
  const supportTickets: SupportTicket[] = [
    {
      id: 'TKT-001',
      title: 'Intent predictions keep changing on refresh',
      priority: 'critical',
      status: 'wontfix',
      description: 'Every time I refresh the dashboard, all the intent scores change. This makes reporting impossible.',
      vendorResponse: 'This is by design. Our AI continuously recalibrates based on quantum market fluctuations.'
    },
    {
      id: 'TKT-002',
      title: 'CEO found Math.random() in console - URGENT',
      priority: 'critical',
      status: 'pending',
      description: 'Our CEO opened developer tools and found 2,847 calls to Math.random(). He wants an explanation TODAY.',
      vendorResponse: 'Math.random() is part of our proprietary stochastic modeling engine. It\'s very advanced.'
    },
    {
      id: 'TKT-003',
      title: 'Feature Request: Make random more predictable',
      priority: 'high',
      status: 'wontfix',
      description: 'Can you make the random number generator less random? We need consistent reporting.',
      vendorResponse: 'We\'ll add this to our roadmap for Q7 2029.'
    },
    {
      id: 'TKT-004',
      title: 'Bug: Historical data changes every day',
      priority: 'critical',
      status: 'open',
      description: 'Yesterday\'s intent scores are different today. Last week\'s data is completely different. How is this possible?',
      vendorResponse: 'Our AI retroactively adjusts historical data based on new learnings. This is a feature.'
    },
    {
      id: 'TKT-005',
      title: 'Same company, different scores on two screens',
      priority: 'high',
      status: 'pending',
      description: 'I have the dashboard open on two monitors. Same company shows 92% intent on left screen, 31% on right screen.',
      vendorResponse: 'Please ensure both browsers are using the same quantum entanglement settings.'
    }
  ];

  // Support call scripts
  const callScripts = [
    {
      customer1: "Your platform says IBM has 95% buying intent for our product.",
      support1: "That's great! Our AI has detected strong signals.",
      customer2: "But when I refresh, it says 23%.",
      support2: "The AI is... recalibrating based on new micro-moments.",
      customer3: "MICRO-MOMENTS OF WHAT? IT'S BEEN 2 SECONDS!",
      support3: "Would you like to upgrade to our Premium Stability Package?"
    },
    {
      customer: "We need to debug why intent scores keep changing.",
      support: "Certainly! What specific issue are you experiencing?",
      customer: "The scores are random. Literally random.",
      support: "Let me check... Ah yes, we need to recalibrate your randomness coefficient.",
      customer: "My WHAT? You mean Math.random()???",
      support: "No no, it's much more sophisticated. We use Math.random() with AI."
    },
    {
      customer: "I found Math.random() in your code. Line 1,247.",
      support: "That's our proprietary Random Intelligence Engine™.",
      customer: "It's LITERALLY just Math.random() in a for loop!",
      support: "It's AI-powered randomness. Very different.",
      customer: "How is it different?",
      support: "...It runs in the cloud?"
    },
    {
      customer: "Can you make Math.random() return the same number?",
      support: "Let me transfer you to our senior engineer.",
      customer: "Wait, that's impossible. It's RANDOM.",
      support: "Our senior engineer can explain the quantum mechanics.",
      customer: "THERE ARE NO QUANTUM MECHANICS IN MATH.RANDOM()!",
      support: "Please hold while I Google... I mean, consult our documentation."
    }
  ];

  // Simulate random changes
  useEffect(() => {
    const interval = setInterval(() => {
      setMathRandomValue(Math.random());
      if (debugMode) {
        setRefreshCount(prev => prev + 1);
      }
    }, 1000);
    return () => clearInterval(interval);
  }, [debugMode]);

  return (
    <div className="min-h-screen bg-black text-white p-8">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center mb-12"
      >
        <h1 className="text-6xl font-black mb-4">
          THE DEEPAK REVENGE SIMULATOR
        </h1>
        <p className="text-2xl text-gray-400">
          Watch Math.random() vendors try to explain the unexplainable
        </p>
      </motion.div>

      {/* The Debug Console */}
      <motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        className="max-w-6xl mx-auto mb-12"
      >
        <div className="backdrop-blur-2xl bg-white/5 rounded-3xl border border-white/10 p-8">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold flex items-center gap-3">
              <Bug className="w-8 h-8 text-red-500" />
              VENDOR DEBUG CONSOLE
            </h2>
            <button
              onClick={() => setDebugMode(!debugMode)}
              className={`px-4 py-2 rounded-lg font-bold transition-all ${
                debugMode 
                  ? 'bg-red-600 text-white' 
                  : 'bg-gray-800 text-gray-400 hover:bg-gray-700'
              }`}
            >
              {debugMode ? 'DEBUGGING...' : 'START DEBUG'}
            </button>
          </div>

          {/* The "Debug" Interface */}
          <div className="bg-black/50 rounded-xl p-6 font-mono text-sm">
            <div className="text-green-400 mb-2">// Their "AI-Powered Intent Engine"</div>
            <div className="text-white">
              <span className="text-blue-400">function</span> getIntentScore(company) {'{'}
            </div>
            <div className="text-white ml-4">
              <span className="text-gray-500">// TODO: Add actual AI here</span>
            </div>
            <div className="text-white ml-4">
              <span className="text-blue-400">return</span> <span className="text-yellow-400">Math</span>.<span className="text-yellow-400">random</span>() * <span className="text-green-400">100</span>;
              <span className="text-gray-500"> // Current: {mathRandomValue.toFixed(4)}</span>
            </div>
            <div className="text-white">{'}'}</div>
            
            {debugMode && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                className="mt-4 pt-4 border-t border-gray-800"
              >
                <div className="text-red-400">⚠️ RANDOM VALUES DETECTED</div>
                <div className="text-gray-400 mt-2">
                  Refresh count: {refreshCount}<br/>
                  Unique values generated: {refreshCount}<br/>
                  Predictability: 0%<br/>
                  Customer satisfaction: undefined
                </div>
              </motion.div>
            )}
          </div>

          {debugMode && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="mt-6 p-4 rounded-xl bg-red-900/30 border border-red-500/50"
            >
              <div className="flex items-center gap-3">
                <AlertTriangle className="w-6 h-6 text-red-500" />
                <span className="font-bold text-red-400">CRITICAL ERROR</span>
              </div>
              <p className="text-sm mt-2">
                Cannot debug Math.random(). It's working as intended. That's the problem.
              </p>
            </motion.div>
          )}
        </div>
      </motion.div>

      {/* Support Call Simulator */}
      <div className="max-w-6xl mx-auto grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12">
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          className="backdrop-blur-2xl bg-white/5 rounded-3xl border border-white/10 p-8"
        >
          <h3 className="text-xl font-bold mb-6 flex items-center gap-3">
            <PhoneOff className="w-6 h-6 text-red-500" />
            SUPPORT CALL IN PROGRESS
          </h3>
          
          <div className="space-y-4">
            {callScripts[currentCall] && (
              <>
                {Object.entries(callScripts[currentCall]).map(([role, text], i) => (
                  <motion.div
                    key={i}
                    initial={{ opacity: 0, x: role === 'customer' ? -10 : 10 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: i * 0.5 }}
                    className={`p-3 rounded-lg ${
                      role === 'customer' 
                        ? 'bg-blue-900/30 border border-blue-500/30' 
                        : 'bg-gray-900/50 border border-gray-700'
                    }`}
                  >
                    <div className="text-xs text-gray-500 mb-1">
                      {role === 'customer' ? 'CUSTOMER (getting angry)' : 'SUPPORT (sweating)'}
                    </div>
                    <div className="text-sm">{text}</div>
                  </motion.div>
                ))}
              </>
            )}
          </div>

          <div className="mt-6 flex items-center justify-between">
            <button
              onClick={() => setCurrentCall((prev) => (prev + 1) % callScripts.length)}
              className="px-4 py-2 rounded-lg bg-red-600 hover:bg-red-700 font-bold text-sm transition-all"
            >
              NEXT DISASTER →
            </button>
            <div className="text-xs text-gray-500">
              Call #{currentCall + 1} of {callScripts.length}
            </div>
          </div>
        </motion.div>

        {/* Support Ticket Viewer */}
        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          className="backdrop-blur-2xl bg-white/5 rounded-3xl border border-white/10 p-8"
        >
          <h3 className="text-xl font-bold mb-6 flex items-center gap-3">
            <MessageSquare className="w-6 h-6 text-yellow-500" />
            SUPPORT TICKETS ({supportTickets.length} UNRESOLVABLE)
          </h3>

          <div className="space-y-3 max-h-96 overflow-y-auto">
            {supportTickets.map((ticket) => (
              <motion.div
                key={ticket.id}
                whileHover={{ scale: 1.02 }}
                className="p-3 rounded-lg bg-gray-900/50 border border-gray-700 cursor-pointer"
                onClick={() => setShowTickets(!showTickets)}
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <span className={`text-xs px-2 py-1 rounded font-bold ${
                        ticket.priority === 'critical' 
                          ? 'bg-red-900/50 text-red-400' 
                          : ticket.priority === 'high'
                          ? 'bg-yellow-900/50 text-yellow-400'
                          : 'bg-gray-800 text-gray-400'
                      }`}>
                        {ticket.priority}
                      </span>
                      <span className="text-xs text-gray-500">{ticket.id}</span>
                    </div>
                    <div className="text-sm font-bold mb-1">{ticket.title}</div>
                    <div className="text-xs text-gray-400">{ticket.description}</div>
                    {ticket.vendorResponse && (
                      <div className="mt-2 p-2 rounded bg-black/50 border border-gray-800">
                        <div className="text-xs text-gray-500">Vendor Response:</div>
                        <div className="text-xs text-red-400 italic">"{ticket.vendorResponse}"</div>
                      </div>
                    )}
                  </div>
                  <span className={`text-xs px-2 py-1 rounded ${
                    ticket.status === 'wontfix' 
                      ? 'bg-red-900/30 text-red-400' 
                      : 'bg-yellow-900/30 text-yellow-400'
                  }`}>
                    {ticket.status}
                  </span>
                </div>
              </motion.div>
            ))}
          </div>
        </motion.div>
      </div>

      {/* The Punchline */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="max-w-4xl mx-auto"
      >
        <div className="backdrop-blur-2xl bg-gradient-to-r from-green-900/20 to-blue-900/20 rounded-3xl border border-green-500/30 p-12 text-center">
          <h2 className="text-4xl font-black mb-6">
            MEANWHILE, AT SENTIENTIQ...
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div className="p-4 rounded-xl bg-black/50">
              <Code className="w-8 h-8 text-green-400 mx-auto mb-2" />
              <div className="text-2xl font-bold">0</div>
              <div className="text-xs text-gray-400">Math.random() calls</div>
            </div>
            <div className="p-4 rounded-xl bg-black/50">
              <Cpu className="w-8 h-8 text-blue-400 mx-auto mb-2" />
              <div className="text-2xl font-bold">12</div>
              <div className="text-xs text-gray-400">Real PhDs</div>
            </div>
            <div className="p-4 rounded-xl bg-black/50">
              <HelpCircle className="w-8 h-8 text-purple-400 mx-auto mb-2" />
              <div className="text-2xl font-bold">100%</div>
              <div className="text-xs text-gray-400">Explainable</div>
            </div>
          </div>

          <p className="text-xl text-gray-300 mb-8">
            Every decision traced to source. Every prediction explained. 
            Every credential verified on blockchain.
          </p>

          <div className="inline-block p-6 rounded-xl bg-black/70 border border-green-500/50">
            <div className="text-green-400 font-mono text-sm text-left">
              // Our actual code<br/>
              function getIntentScore(company) {'{'}<br/>
              {'  '}// 600K documents analyzed<br/>
              {'  '}// 12 PhD consensus<br/>
              {'  '}// 4-core ML models<br/>
              {'  '}return intelligenceLayer.analyze(company);<br/>
              {'}'}
            </div>
          </div>

          <div className="mt-8">
            <button className="px-8 py-4 rounded-xl bg-gradient-to-r from-green-600 to-blue-600 font-bold text-xl hover:from-green-700 hover:to-blue-700 transition-all">
              BOOK YOUR DEEPAK REVENGE CALL
            </button>
            <p className="text-xs text-gray-500 mt-2">
              For when you're ready to stop debugging random
            </p>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

export default DeepakRevenge;