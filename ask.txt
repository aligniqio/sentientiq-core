// pages/AskLuxe.tsx
import React, { useMemo, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Brain, Sparkles, Send, ChevronDown, Check, XCircle } from "lucide-react";

const API_BASE = import.meta.env.VITE_API_BASE || "http://localhost:8000";

// --- 12 PhDs (name = server agent key) ---
const PHDS = [
  { name: "Strategy", title: "Chief Marketing Officer", color: "from-violet-500/30 to-sky-500/30" },
  { name: "Emotion", title: "Consumer Psychology", color: "from-rose-500/30 to-fuchsia-500/30" },
  { name: "Pattern", title: "Data Science Lead", color: "from-sky-500/30 to-cyan-500/30" },
  { name: "Identity", title: "CDP Architect", color: "from-emerald-500/30 to-teal-500/30" },
  { name: "Chaos", title: "Creative Mutation", color: "from-amber-500/30 to-rose-500/30" },
  { name: "ROI", title: "Budget Optimization", color: "from-lime-500/30 to-emerald-500/30" },
  { name: "Warfare", title: "Competitive Intelligence", color: "from-red-500/30 to-rose-500/30" },
  { name: "Omni", title: "Channel Optimizer", color: "from-indigo-500/30 to-violet-500/30" },
  { name: "First", title: "Onboarding Intelligence", color: "from-fuchsia-500/30 to-indigo-500/30" },
  { name: "Truth", title: "Attribution Science", color: "from-slate-500/30 to-blue-500/30" },
  { name: "Brutal", title: "Shop Intelligence", color: "from-neutral-500/30 to-red-500/30" },
  { name: "Context", title: "Business Intelligence", color: "from-slate-500/30 to-zinc-500/30" },
];

// simple POST wrapper
async function askAgent(question: string, agent: string, context?: any) {
  const res = await fetch(`${API_BASE}/ask`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ question, agent, context }),
  });
  if (!res.ok) throw new Error(`ASK failed: ${res.status}`);
  return (await res.json()) as {
    agent: string;
    decision: "GO" | "WAIT";
    confidence: number;
    why: { features: Record<string, number>; model_version: string };
  };
}

function NeuronBackdrop() {
  return (
    <div aria-hidden className="pointer-events-none absolute inset-0 -z-10">
      <div className="absolute inset-0 bg-[radial-gradient(900px_500px_at_20%_-10%,rgba(124,58,237,0.16),transparent_60%),radial-gradient(800px_500px_at_85%_110%,rgba(56,189,248,0.14),transparent_60%)]" />
      <div className="absolute inset-0 bg-[radial-gradient(1200px_700px_at_50%_40%,rgba(255,255,255,0.04),transparent)]" />
    </div>
  );
}

function AgentBadge({ a, active, onClick }: any) {
  return (
    <button
      onClick={onClick}
      className={`group relative rounded-2xl border border-white/10 bg-white/5 backdrop-blur-xl p-4 text-left transition hover:ring-1 hover:ring-white/20 ${
        active ? "ring-1 ring-white/20" : ""
      }`}
    >
      <div className={`absolute -inset-px rounded-2xl bg-gradient-to-br ${a.color} opacity-0 blur-2xl group-hover:opacity-20`} />
      <div className="flex items-center gap-3 relative">
        <div className="flex h-10 w-10 items-center justify-center rounded-xl bg-white/10 ring-1 ring-white/15">
          <Brain className="h-5 w-5 text-violet-300" />
        </div>
        <div className="min-w-0">
          <div className="font-semibold">{a.name}</div>
          <div className="text-xs text-white/60 truncate">{a.title}</div>
        </div>
        {active && <Check className="ml-auto h-5 w-5 text-emerald-400" />}
      </div>
    </button>
  );
}

function ConfidenceRing({ value, decision }: { value: number; decision: "GO" | "WAIT" }) {
  const pct = Math.round(value * 100);
  const stroke = 282.6; // 2πr (r=45)
  const offset = stroke - (stroke * pct) / 100;
  const isGo = decision === "GO";
  return (
    <div className="relative h-28 w-28">
      <svg viewBox="0 0 100 100" className="h-28 w-28 -rotate-90">
        <circle cx="50" cy="50" r="45" stroke="rgba(255,255,255,.12)" strokeWidth="10" fill="none" />
        <circle
          cx="50" cy="50" r="45" stroke="url(#grad)" strokeWidth="10" strokeDasharray={stroke}
          strokeDashoffset={offset} fill="none" strokeLinecap="round"
        />
        <defs>
          <linearGradient id="grad" x1="0" y1="0" x2="1" y2="1">
            <stop offset="0%" stopColor={isGo ? "#34d399" : "#f59e0b"} />
            <stop offset="100%" stopColor={isGo ? "#10b981" : "#f97316"} />
          </linearGradient>
        </defs>
      </svg>
      <div className="absolute inset-0 flex items-center justify-center">
        <div className="text-center">
          <div className={`text-2xl font-extrabold ${isGo ? "text-emerald-300" : "text-amber-300"}`}>{pct}%</div>
          <div className="text-[11px] uppercase tracking-wide text-white/60">confidence</div>
        </div>
      </div>
    </div>
  );
}

export default function AskLuxe() {
  const [agent, setAgent] = useState(PHDS[0]);
  const [q, setQ] = useState("");
  const [loading, setLoading] = useState(false);
  const [ans, setAns] = useState<null | Awaited<ReturnType<typeof askAgent>>>(null);
  const [whyOpen, setWhyOpen] = useState(false);
  const disabled = !q.trim() || loading;

  const examples = useMemo(
    () => [
      "Should we launch the new offer this week?",
      "Where’s the emotional friction in onboarding?",
      "What is our competitor most vulnerable to right now?",
    ],
    []
  );

  async function onAsk() {
    try {
      setLoading(true);
      const res = await askAgent(q.trim(), agent.name);
      setAns(res);
      setWhyOpen(false);
    } catch (e) {
      console.error(e);
      setAns(null);
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="relative min-h-dvh bg-[linear-gradient(180deg,#0a0a12_0%,#0b0b14_100%)] text-white">
      <NeuronBackdrop />
      {/* Header */}
      <header className="mx-auto max-w-6xl px-6 pt-10 pb-4">
        <div className="flex items-end justify-between gap-4">
          <div>
            <h1 className="text-4xl sm:text-5xl font-extrabold tracking-tight">Ask the Collective</h1>
            <p className="mt-2 text-white/60">
              Twelve PhDs. One answer with a <span className="text-white">Why</span>.
            </p>
          </div>
          <div className="rounded-xl border border-white/10 bg-white/5 px-3 py-2 backdrop-blur-xl text-xs">
            Consensus <span className="ml-2 inline-block h-2 w-24 rounded bg-white/10 align-middle">
              <span className="block h-2 w-[0%] rounded bg-violet-400" />
            </span>{" "}
            0%
          </div>
        </div>
      </header>

      {/* Layout */}
      <div className="mx-auto grid max-w-6xl grid-cols-1 gap-8 px-6 pb-28 lg:grid-cols-12">
        {/* Left: Agent grid + prompt */}
        <section className="lg:col-span-7 space-y-6">
          {/* Agents */}
          <div className="rounded-3xl border border-white/10 bg-white/5 p-4 sm:p-5 backdrop-blur-xl">
            <div className="mb-3 px-1 text-sm font-medium text-white/70">Choose an expert</div>
            <div className="grid grid-cols-1 gap-3 sm:grid-cols-2">
              {PHDS.map((a) => (
                <AgentBadge key={a.name} a={a} active={a.name === agent.name} onClick={() => setAgent(a)} />
              ))}
            </div>
          </div>

          {/* Prompt */}
          <div className="rounded-3xl border border-white/10 bg-white/5 p-5 backdrop-blur-xl">
            <label className="mb-2 block text-sm font-medium text-white/70">Your question</label>
            <div className="flex items-center gap-3 rounded-2xl border border-white/10 bg-black/30 p-3 ring-1 ring-white/5">
              <Sparkles className="h-5 w-5 text-violet-300" />
              <input
                value={q}
                onChange={(e) => setQ(e.target.value)}
                onKeyDown={(e) => {
                  if ((e.ctrlKey || e.metaKey) && e.key === "Enter" && !disabled) onAsk();
                }}
                placeholder={examples[0]}
                className="w-full bg-transparent outline-none placeholder:text-white/40"
              />
              <button
                onClick={onAsk}
                disabled={disabled}
                className={`inline-flex items-center gap-2 rounded-xl px-4 py-2 text-sm font-semibold transition ${
                  disabled
                    ? "bg-white/10 text-white/40 cursor-not-allowed"
                    : "bg-gradient-to-r from-violet-500 to-sky-500 shadow-lg shadow-violet-500/20 ring-1 ring-white/20"
                }`}
              >
                {loading ? "Thinking…" : <>Ask <Send className="h-4 w-4" /></>}
              </button>
            </div>
            <div className="mt-3 flex flex-wrap gap-2 text-xs text-white/60">
              {examples.map((ex) => (
                <button
                  key={ex}
                  onClick={() => setQ(ex)}
                  className="rounded-full border border-white/10 bg-white/5 px-3 py-1 hover:bg-white/10"
                >
                  {ex}
                </button>
              ))}
            </div>
            <div className="mt-2 text-[11px] text-white/50">Tip: ⌘/Ctrl + Enter to ask</div>
          </div>
        </section>

        {/* Right: Answer panel */}
        <section className="lg:col-span-5">
          <div className="relative overflow-hidden rounded-3xl border border-white/10 bg-white/5 p-6 backdrop-blur-xl min-h-[360px]">
            {/* ambient glow */}
            <div className="pointer-events-none absolute -inset-px rounded-3xl bg-gradient-to-br from-violet-500/20 to-sky-500/20 opacity-10 blur-2xl" />
            {!ans ? (
              <div className="flex h-full flex-col items-center justify-center text-center text-white/60">
                <Brain className="mb-3 h-8 w-8 text-white/50" />
                The faculty is thinking…
                <div className="mt-1 text-xs">Ask a question to begin the debate.</div>
              </div>
            ) : (
              <AnimatePresence mode="popLayout">
                <motion.div
                  key={`${ans.agent}-${ans.decision}-${ans.confidence}`}
                  initial={{ opacity: 0, y: 8, scale: 0.98 }}
                  animate={{ opacity: 1, y: 0, scale: 1 }}
                  exit={{ opacity: 0, y: -6 }}
                  transition={{ duration: 0.3 }}
                >
                  {/* decision header */}
                  <div className="flex items-center gap-4">
                    <ConfidenceRing value={ans.confidence} decision={ans.decision} />
                    <div className="min-w-0">
                      <div className="text-sm text-white/60">Agent</div>
                      <div className="text-xl font-semibold">{ans.agent}</div>
                      <div className="mt-2">
                        {ans.decision === "GO" ? (
                          <span className="inline-flex items-center gap-2 rounded-full bg-emerald-500/15 px-3 py-1.5 text-sm font-semibold text-emerald-300 ring-1 ring-emerald-400/30">
                            <Check className="h-4 w-4" /> GO
                          </span>
                        ) : (
                          <span className="inline-flex items-center gap-2 rounded-full bg-amber-500/15 px-3 py-1.5 text-sm font-semibold text-amber-300 ring-1 ring-amber-400/30">
                            <XCircle className="h-4 w-4" /> WAIT
                          </span>
                        )}
                      </div>
                    </div>
                  </div>

                  {/* why drawer */}
                  <button
                    onClick={() => setWhyOpen((s) => !s)}
                    className="mt-6 inline-flex items-center gap-2 text-sm text-violet-300"
                  >
                    Why this decision <ChevronDown className={`h-4 w-4 transition ${whyOpen ? "rotate-180" : ""}`} />
                  </button>
                  <AnimatePresence initial={false}>
                    {whyOpen && (
                      <motion.div
                        initial={{ height: 0, opacity: 0 }}
                        animate={{ height: "auto", opacity: 1 }}
                        exit={{ height: 0, opacity: 0 }}
                        className="overflow-hidden"
                      >
                        <div className="mt-3 grid grid-cols-2 gap-3 text-sm">
                          {Object.entries(ans.why.features).map(([k, v]) => (
                            <div key={k} className="rounded-xl border border-white/10 bg-black/30 p-3">
                              <div className="text-xs text-white/60">{k}</div>
                              <div className="font-semibold">{typeof v === "number" ? v.toFixed(3) : String(v)}</div>
                            </div>
                          ))}
                        </div>
                        <div className="mt-3 text-xs text-white/60">
                          Model version: <span className="text-white">{ans.why.model_version}</span>
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </motion.div>
              </AnimatePresence>
            )}
          </div>
        </section>
      </div>
    </div>
  );
}



quick wire-up

npm i framer-motion lucide-react (if you haven’t).

Route it at /ask (replace or keep your old one).

Set VITE_API_BASE to your EC2 API (or proxy through your frontend).

optional niceties to add later

bind consensus meter to /pulse/snapshot for the active brand/topic

persist last selected agent & last 3 questions in localStorage

add mic icon → speech-to-text (browser Web Speech API) if you want hands-free