// ui/Confetti.tsx
import React, { useEffect, useRef } from "react";
export default function Confetti({ fire }: { fire: boolean }) {
  const ref = useRef<HTMLCanvasElement>(null);
  useEffect(() => {
    if (!fire || !ref.current) return;
    const c = ref.current, ctx = c.getContext("2d")!;
    let W = (c.width = window.innerWidth), H = (c.height = window.innerHeight);
    const parts = Array.from({length: 120}).map(()=>({
      x: W/2, y: H/2, r: Math.random()*2+1,
      vx: (Math.random()-0.5)*6, vy: (Math.random()-0.8)*-8,
      a: 1, h: Math.floor(Math.random()*360)
    }));
    let anim = true;
    const tick = () => {
      ctx.clearRect(0,0,W,H);
      parts.forEach(p=>{
        p.vy += 0.15; p.x += p.vx; p.y += p.vy; p.a -= 0.01;
        ctx.globalAlpha = Math.max(p.a,0);
        ctx.fillStyle = `hsl(${p.h} 90% 60%)`;
        ctx.beginPath(); ctx.arc(p.x,p.y,p.r,0,Math.PI*2); ctx.fill();
      });
      if (parts.some(p=>p.a>0)) requestAnimationFrame(tick); else anim=false;
    };
    tick();
    const onR=()=>{W=c.width=window.innerWidth;H=c.height=window.innerHeight;};
    window.addEventListener("resize", onR);
    return ()=>{ anim=false; window.removeEventListener("resize", onR); };
  }, [fire]);
  return <canvas ref={ref} className={`pointer-events-none fixed inset-0 z-[9998] ${fire?"":"hidden"}`} />;
}
