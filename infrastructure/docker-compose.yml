version: '3.8'

services:
  # NATS JetStream - The nervous system
  nats:
    image: nats:2.10-alpine
    container_name: sentientiq-nats
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # HTTP monitoring
    command: [
      "-js",                    # Enable JetStream
      "-sd", "/data",          # Storage directory
      "-m", "8222",            # Monitoring port
      "--max_payload", "10MB",  # For larger social posts
      "--max_connections", "1000000",
      "--max_subscriptions", "1000000"
    ]
    volumes:
      - nats-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Fast state and caching
  redis:
    image: redis:7-alpine
    container_name: sentientiq-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: [
      "redis-server",
      "--appendonly", "yes",
      "--maxmemory", "2gb",
      "--maxmemory-policy", "allkeys-lru"
    ]
    restart: unless-stopped

  # PostgreSQL with pgvector - Dr. Brutal's memory + agent state
  postgres:
    image: pgvector/pgvector:pg16
    container_name: sentientiq-postgres
    environment:
      POSTGRES_DB: sentientiq
      POSTGRES_USER: sentient
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-truthmatters2024}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    restart: unless-stopped

  # MinIO - Local S3 for development (the moat storage)
  minio:
    image: minio/minio:latest
    container_name: sentientiq-minio
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID:-sentientiq}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY:-truthwins2024}
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: sentientiq-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped

  # Grafana - Visualization (EVI dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: sentientiq-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-truthdashboard}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
      - redis
    restart: unless-stopped

volumes:
  nats-data:
  redis-data:
  postgres-data:
  minio-data:
  prometheus-data:
  grafana-data:

networks:
  default:
    name: sentientiq-network
    driver: bridge