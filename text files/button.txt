A) If you’re using SenseiCandyProvider (recommended)
1) Tiny patch: add an event bus to the provider

Drop these lines inside your existing SenseiCandyProvider (after the props):

// inside SenseiCandyProvider (add at top of component)
const [burstGo, setBurstGo] = React.useState(false);
const [burstWait, setBurstWait] = React.useState(false);

React.useEffect(() => {
  const onGo = () => { setBurstGo(true); setTimeout(() => setBurstGo(false), 1800); };
  const onWait = () => { setBurstWait(true); setTimeout(() => setBurstWait(false), 1800); };
  window.addEventListener("sensei:go", onGo as any);
  window.addEventListener("sensei:wait", onWait as any);
  (window as any).sensei = {
    go: () => window.dispatchEvent(new Event("sensei:go")),
    wait: () => window.dispatchEvent(new Event("sensei:wait")),
  };
  return () => {
    window.removeEventListener("sensei:go", onGo as any);
    window.removeEventListener("sensei:wait", onWait as any);
    delete (window as any).sensei;
  };
}, []);

…and change the confetti mounts at the bottom to:

{confetti && <>
  <Confetti fire={!!(fireGo || burstGo)} tone="go" />
  <Confetti fire={!!(fireWait || burstWait)} tone="wait" />
</>}

2) The button: GodammConfettiButton.tsx

Paste this and drop it anywhere (navbar, demo page, etc.):

// GodammConfettiButton.tsx
import React from "react";
import { PartyPopper, Zap } from "lucide-react";

export default function GodammConfettiButton() {
  return (
    <div className="flex gap-3">
      <button
        onClick={() => (window as any).sensei?.go()}
        className="inline-flex items-center gap-2 rounded-xl bg-gradient-to-r from-emerald-500 to-sky-500 px-4 py-2
                   text-sm font-semibold shadow-lg shadow-emerald-500/20 ring-1 ring-white/20 hover:brightness-110"
        title="Launch GO confetti"
      >
        <PartyPopper className="h-4 w-4" /> Confetti (GO)
      </button>
      <button
        onClick={() => (window as any).sensei?.wait()}
        className="inline-flex items-center gap-2 rounded-xl bg-gradient-to-r from-amber-500 to-rose-500 px-4 py-2
                   text-sm font-semibold shadow-lg shadow-amber-500/20 ring-1 ring-white/20 hover:brightness-110"
        title="Launch WAIT confetti"
      >
        <Zap className="h-4 w-4" /> Confetti (WAIT)
      </button>
    </div>
  );
}

That’s it. Click = kaboom. Works anywhere in the app because the provider exposes window.sensei.go() / .wait().

B) Standalone (no provider, one-file party)

Need a button that brings its own confetti without any wiring? Paste this:

// OneShotConfettiButton.tsx
import React, { useRef } from "react";
import { PartyPopper } from "lucide-react";

export default function OneShotConfettiButton() {
  const ref = useRef<HTMLCanvasElement>(null);

  const fire = () => {
    const c = ref.current!;
    const ctx = c.getContext("2d")!;
    let W = (c.width = window.innerWidth), H = (c.height = window.innerHeight);
    const parts = Array.from({ length: 140 }).map(() => ({
      x: W / 2, y: H / 2, r: Math.random() * 2 + 1,
      vx: (Math.random() - 0.5) * 6, vy: (Math.random() - 0.8) * -8,
      a: 1, h: Math.floor(Math.random() * 360)
    }));
    const onR = () => { W = c.width = innerWidth; H = c.height = innerHeight; };
    window.addEventListener("resize", onR, { once: true });
    const tick = () => {
      ctx.clearRect(0, 0, W, H);
      let alive = false;
      for (const p of parts) {
        p.vy += 0.15; p.x += p.vx; p.y += p.vy; p.a -= 0.01;
        if (p.a > 0) alive = true;
        ctx.globalAlpha = Math.max(p.a, 0);
        ctx.fillStyle = `hsl(${p.h} 90% 60%)`;
        ctx.beginPath(); ctx.arc(p.x, p.y, p.r, 0, Math.PI * 2); ctx.fill();
      }
      if (alive) requestAnimationFrame(tick);
    };
    tick();
    setTimeout(() => { ctx.clearRect(0, 0, W, H); }, 2200);
  };

  return (
    <>
      <button
        onClick={fire}
        className="inline-flex items-center gap-2 rounded-xl bg-gradient-to-r from-violet-500 to-sky-500 px-4 py-2
                   text-sm font-semibold shadow-lg shadow-violet-500/20 ring-1 ring-white/20 hover:brightness-110"
      >
        <PartyPopper className="h-4 w-4" /> Confetti
      </button>
      <canvas ref={ref} className="pointer-events-none fixed inset-0 z-[9999]" />
    </>
  );
}


Pick A (with the provider) for app-wide party-on-demand, or B for a self-contained “make it rain” button.

Need me to wire the GO confetti to trigger automatically when /ask returns decision: "GO"?