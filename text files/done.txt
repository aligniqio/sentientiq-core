1. Inside SenseiCandyProvider

(make sure you added the event bus snippet I gave earlier):

(window as any).sensei = {
  go: () => window.dispatchEvent(new Event("sensei:go")),
  wait: () => window.dispatchEvent(new Event("sensei:wait")),
};


So anywhere in your app, calling window.sensei.go() or window.sensei.wait() fires confetti.

2. Hook into Ask responses

In your AskLuxe.tsx (where you already call askAgent):

async function onAsk() {
  try {
    setLoading(true);
    const res = await askAgent(q.trim(), agent.name);
    setAns(res);
    setWhyOpen(false);

    // ðŸŽ‰ trigger confetti automatically
    if (res.decision === "GO") {
      (window as any).sensei?.go();
    } else {
      (window as any).sensei?.wait();
    }
  } catch (e) {
    console.error(e);
  } finally {
    setLoading(false);
  }
}

Now whenever an agent says GO â†’ emerald/sky confetti burst; WAIT â†’ amber/rose burst.

3. Optional Manual Button

Still want the godamm button too? Drop this anywhere:

import GodammConfettiButton from "@/ui/GodammConfettiButton";

<GodammConfettiButton />


Clicking it fires the same bursts on demand.