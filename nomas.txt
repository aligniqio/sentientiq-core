1) Upgrade the provider to accept decision events with confidence
Replace the event bus in SenseiCandyProvider with this:

// inside SenseiCandyProvider
const [burst, setBurst] = React.useState<{ tone:"go"|"wait"; power:number } | null>(null);

React.useEffect(() => {
  const onDecision = (e: Event) => {
    const ce = e as CustomEvent<{ decision:"GO"|"WAIT"; confidence:number }>;
    const { decision, confidence } = ce.detail || { decision: "WAIT", confidence: 0.5 };
    // map confidence â†’ power (0..1). GO uses conf; WAIT uses (1-conf) so high-certainty WAIT still looks weighty but muted
    const p = Math.max(0, Math.min(1, decision === "GO" ? (confidence - 0.5) / 0.5 : (1 - confidence)));
    setBurst({ tone: decision === "GO" ? "go" : "wait", power: p });
    // auto-clear after 2s
    setTimeout(() => setBurst(null), 2000);
  };

  window.addEventListener("sensei:decision", onDecision as any);
  (window as any).sensei = {
    decision: (decision: "GO"|"WAIT", confidence = 0.5) =>
      window.dispatchEvent(new CustomEvent("sensei:decision", { detail: { decision, confidence } })),
    go: () => window.dispatchEvent(new CustomEvent("sensei:decision", { detail: { decision: "GO", confidence: 0.85 } })),
    wait: () => window.dispatchEvent(new CustomEvent("sensei:decision", { detail: { decision: "WAIT", confidence: 0.5 } })),
  };
  return () => {
    window.removeEventListener("sensei:decision", onDecision as any);
    delete (window as any).sensei;
  };
}, []);


Update the confetti mounts at the bottom:

{confetti && burst && (
  <Confetti fire tone={burst.tone} power={burst.power} />
)}

2) Make the Confetti respect intensity (particles, speed, duration)
Replace your Confetti component with this version:

function Confetti({ fire, tone="go", power=0.5 }:{ fire:boolean; tone?:"go"|"wait"; power?:number }) {
  const ref = React.useRef<HTMLCanvasElement>(null);

  React.useEffect(() => {
    if (!fire || !ref.current) return;
    const c = ref.current, ctx = c.getContext("2d")!;
    let W = (c.width = window.innerWidth), H = (c.height = window.innerHeight);

    // ease power: smoother ramp (0..1)
    const ease = (t:number) => t*t;                // easeInQuad
    const P = ease(Math.max(0, Math.min(1, power)));

    // scale knobs
    const COUNT   = Math.round(80 + 240 * P);      // 80 .. 320 particles
    const SPEED   = 1 + 1.6 * P;                   // velocity multiplier
    const GRAV    = 0.12 + 0.18 * P;               // gravity
    const FADE    = 0.012 - 0.006 * P;             // slower fade for bigger bursts
    const HUEBASE = tone === "go" ? 120 : 20;      // green/blue vs amber/rose

    const parts = Array.from({ length: COUNT }).map(() => ({
      x: W/2, y: H/2,
      r: Math.random()*2 + (P>0.6 ? 2 : 1),        // slightly bigger dots at high power
      vx: (Math.random()-0.5) * 6 * SPEED,
      vy: (Math.random()-0.8) * -8 * SPEED,
      a: 1,
      h: HUEBASE + Math.random() * 40
    }));

    let raf = 0;
    const tick = () => {
      ctx.clearRect(0,0,W,H);
      let alive = false;
      for (const p of parts) {
        p.vy += GRAV;
        p.x  += p.vx;
        p.y  += p.vy;
        p.a  -= FADE;
        if (p.a > 0) alive = true;
        ctx.globalAlpha = Math.max(p.a, 0);
        ctx.fillStyle = `hsl(${p.h} 90% 60%)`;
        ctx.beginPath(); ctx.arc(p.x, p.y, p.r, 0, Math.PI*2); ctx.fill();
      }
      if (alive) raf = requestAnimationFrame(tick);
    };
    tick();

    const onR = () => { W = c.width = innerWidth; H = c.height = innerHeight; };
    window.addEventListener("resize", onR);
    return () => { cancelAnimationFrame(raf); window.removeEventListener("resize", onR); };
  }, [fire, tone, power]);

  return <canvas ref={ref} className="pointer-events-none fixed inset-0 z-[9998]" />;
}
3) Fire it from the Ask page with real confidence

In AskLuxe.tsx (right after you receive res from /ask):

const res = await askAgent(q.trim(), agent.name);
setAns(res);
setWhyOpen(false);

// ðŸŽ¯ blast confetti with proper intensity
(window as any).sensei?.decision(res.decision, res.confidence);
Now a 0.66 GO gives a modest burst, 0.92 GO floods the room, and a 0.25 WAIT barely flickers â€” exactly how it should feel.